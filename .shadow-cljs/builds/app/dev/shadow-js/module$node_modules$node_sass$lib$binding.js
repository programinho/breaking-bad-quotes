["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/node-sass/lib/binding.js"],"~:js","shadow$provide.module$node_modules$node_sass$lib$binding=function(global,require,module,exports){var errors=require(\"module$node_modules$node_sass$lib$errors\");module.exports=function(ext){if(!ext.hasBinary(ext.getBinaryPath())){if(ext.isSupportedEnvironment())throw Error(errors.missingBinary());throw Error(errors.unsupportedEnvironment());}return require(ext.getBinaryPath())}}","~:source","shadow$provide[\"module$node_modules$node_sass$lib$binding\"] = function(global,require,module,exports) {\n/*!\n * node-sass: lib/binding.js\n */\n\nvar errors = require('./errors');\n\n/**\n * Require binding\n */\nmodule.exports = function(ext) {\n  if (!ext.hasBinary(ext.getBinaryPath())) {\n    if (!ext.isSupportedEnvironment()) {\n      throw new Error(errors.unsupportedEnvironment());\n    } else {\n      throw new Error(errors.missingBinary());\n    }\n  }\n\n  return require(ext.getBinaryPath());\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$node_sass$lib$errors"]],"~:properties",["^5",[]],"~:compiled-at",1562407149202,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$node_sass$lib$binding.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAKtG,IAAIC,OAASH,OAAA,CAAQ,0CAAR,CAKbC,OAAAC,QAAA,CAAiBE,QAAQ,CAACC,GAAD,CAAM,CAC7B,GAAI,CAACA,GAAAC,UAAA,CAAcD,GAAAE,cAAA,EAAd,CAAL,CAAyC,CACvC,GAAKF,GAAAG,uBAAA,EAAL,CAGE,KAAUC,MAAJ,CAAUN,MAAAO,cAAA,EAAV,CAAN,CAFA,KAAUD,MAAJ,CAAUN,MAAAQ,uBAAA,EAAV,CAAN,CAFqC,CAQzC,MAAOX,QAAA,CAAQK,GAAAE,cAAA,EAAR,CATsB,CAVuE;\",\n\"sources\":[\"node_modules/node-sass/lib/binding.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$node_sass$lib$binding\\\"] = function(global,require,module,exports) {\\n/*!\\n * node-sass: lib/binding.js\\n */\\n\\nvar errors = require('./errors');\\n\\n/**\\n * Require binding\\n */\\nmodule.exports = function(ext) {\\n  if (!ext.hasBinary(ext.getBinaryPath())) {\\n    if (!ext.isSupportedEnvironment()) {\\n      throw new Error(errors.unsupportedEnvironment());\\n    } else {\\n      throw new Error(errors.missingBinary());\\n    }\\n  }\\n\\n  return require(ext.getBinaryPath());\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"errors\",\"module.exports\",\"ext\",\"hasBinary\",\"getBinaryPath\",\"isSupportedEnvironment\",\"Error\",\"missingBinary\",\"unsupportedEnvironment\"]\n}\n"]