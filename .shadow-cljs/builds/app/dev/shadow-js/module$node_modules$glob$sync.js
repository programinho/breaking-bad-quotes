["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/glob/sync.js"],"~:js","shadow$provide.module$node_modules$glob$sync=function(global,require,module,exports){function globSync(pattern,options){if(\"function\"===typeof options||3===arguments.length)throw new TypeError(\"callback provided to sync glob\\nSee: https://github.com/isaacs/node-glob/issues/167\");return(new GlobSync(pattern,options)).found}function GlobSync(pattern,options){if(!pattern)throw Error(\"must provide pattern\");if(\"function\"===typeof options||3===arguments.length)throw new TypeError(\"callback provided to sync glob\\nSee: https://github.com/isaacs/node-glob/issues/167\");\nif(!(this instanceof GlobSync))return new GlobSync(pattern,options);setopts(this,pattern,options);if(this.noprocess)return this;var n=this.minimatch.set.length;this.matches=Array(n);for(var i=0;i<n;i++)this._process(this.minimatch.set[i],i,!1);this._finish()}var process=require(\"module$node_modules$process$browser\");module.exports=globSync;globSync.GlobSync=GlobSync;var fs=require(\"shadow$empty\"),rp=require(\"module$node_modules$fs_DOT_realpath$index\"),minimatch=require(\"module$node_modules$minimatch$minimatch\");\nrequire(\"module$node_modules$glob$glob\");require(\"module$node_modules$util$util\");var path=require(\"module$node_modules$path_browserify$index\"),assert=require(\"module$node_modules$assert$assert\"),isAbsolute=require(\"module$node_modules$path_is_absolute$index\"),common=require(\"module$node_modules$glob$common\"),setopts=common.setopts,ownProp=common.ownProp,childrenIgnored=common.childrenIgnored,isIgnored=common.isIgnored;GlobSync.prototype._finish=function(){assert(this instanceof GlobSync);if(this.realpath){var self=\nthis;this.matches.forEach(function(matchset,index){index=self.matches[index]=Object.create(null);for(var p in matchset)try{p=self._makeAbs(p);var real=rp.realpathSync(p,self.realpathCache);index[real]=!0}catch(er){if(\"stat\"===er.syscall)index[self._makeAbs(p)]=!0;else throw er;}})}common.finish(this)};GlobSync.prototype._process=function(pattern,index,inGlobStar){assert(this instanceof GlobSync);for(var n=0;\"string\"===typeof pattern[n];)n++;switch(n){case pattern.length:this._processSimple(pattern.join(\"/\"),\nindex);return;case 0:var prefix=null;break;default:prefix=pattern.slice(0,n).join(\"/\")}n=pattern.slice(n);if(null===prefix)pattern=\".\";else{if(isAbsolute(prefix)||isAbsolute(pattern.join(\"/\")))prefix&&isAbsolute(prefix)||(prefix=\"/\"+prefix);pattern=prefix}var abs=this._makeAbs(pattern);childrenIgnored(this,pattern)||(n[0]===minimatch.GLOBSTAR?this._processGlobStar(prefix,pattern,abs,n,index,inGlobStar):this._processReaddir(prefix,pattern,abs,n,index,inGlobStar))};GlobSync.prototype._processReaddir=\nfunction(prefix,read,abs,remain,index,inGlobStar){if(read=this._readdir(abs,inGlobStar)){abs=remain[0];var negate=!!this.minimatch.negate,rawGlob=abs._glob,dotOk=this.dot||\".\"===rawGlob.charAt(0);rawGlob=[];for(var i=0;i<read.length;i++){var e=read[i];(\".\"!==e.charAt(0)||dotOk)&&(negate&&!prefix?!e.match(abs):e.match(abs))&&rawGlob.push(e)}read=rawGlob.length;if(0!==read)if(1!==remain.length||this.mark||this.stat)for(remain.shift(),i=0;i<read;i++)e=rawGlob[i],this._process((prefix?[prefix,e]:[e]).concat(remain),\nindex,inGlobStar);else for(this.matches[index]||(this.matches[index]=Object.create(null)),i=0;i<read;i++)e=rawGlob[i],prefix&&(e=\"/\"!==prefix.slice(-1)?prefix+\"/\"+e:prefix+e),\"/\"!==e.charAt(0)||this.nomount||(e=path.join(this.root,e)),this._emitMatch(index,e)}};GlobSync.prototype._emitMatch=function(index,e){if(!isIgnored(this,e)){var abs=this._makeAbs(e);this.mark&&(e=this._mark(e));this.absolute&&(e=abs);if(!this.matches[index][e]){if(this.nodir&&(abs=this.cache[abs],\"DIR\"===abs||Array.isArray(abs)))return;\nthis.matches[index][e]=!0;this.stat&&this._stat(e)}}};GlobSync.prototype._readdirInGlobStar=function(abs){if(this.follow)return this._readdir(abs,!1);var entries;try{var lstat=fs.lstatSync(abs)}catch(er){if(\"ENOENT\"===er.code)return null}var isSym=lstat&&lstat.isSymbolicLink();(this.symlinks[abs]=isSym)||!lstat||lstat.isDirectory()?entries=this._readdir(abs,!1):this.cache[abs]=\"FILE\";return entries};GlobSync.prototype._readdir=function(abs,inGlobStar){if(inGlobStar&&!ownProp(this.symlinks,abs))return this._readdirInGlobStar(abs);\nif(ownProp(this.cache,abs)){inGlobStar=this.cache[abs];if(!inGlobStar||\"FILE\"===inGlobStar)return null;if(Array.isArray(inGlobStar))return inGlobStar}try{return this._readdirEntries(abs,fs.readdirSync(abs))}catch(er){return this._readdirError(abs,er),null}};GlobSync.prototype._readdirEntries=function(abs,entries){if(!this.mark&&!this.stat)for(var i=0;i<entries.length;i++){var e=entries[i];e=\"/\"===abs?abs+e:abs+\"/\"+e;this.cache[e]=!0}return this.cache[abs]=entries};GlobSync.prototype._readdirError=\nfunction(f,er){switch(er.code){case \"ENOTSUP\":case \"ENOTDIR\":f=this._makeAbs(f);this.cache[f]=\"FILE\";if(f===this.cwdAbs)throw f=Error(er.code+\" invalid cwd \"+this.cwd),f.path=this.cwd,f.code=er.code,f;break;case \"ENOENT\":case \"ELOOP\":case \"ENAMETOOLONG\":case \"UNKNOWN\":this.cache[this._makeAbs(f)]=!1;break;default:this.cache[this._makeAbs(f)]=!1;if(this.strict)throw er;this.silent||console.error(\"glob error\",er)}};GlobSync.prototype._processGlobStar=function(prefix,read,abs,remain,index,inGlobStar){if(read=\nthis._readdir(abs,inGlobStar)){var remainWithoutGlobStar=remain.slice(1);prefix=prefix?[prefix]:[];var noGlobStar=prefix.concat(remainWithoutGlobStar);this._process(noGlobStar,index,!1);noGlobStar=read.length;if(!this.symlinks[abs]||!inGlobStar)for(abs=0;abs<noGlobStar;abs++)if(\".\"!==read[abs].charAt(0)||this.dot)inGlobStar=prefix.concat(read[abs],remainWithoutGlobStar),this._process(inGlobStar,index,!0),inGlobStar=prefix.concat(read[abs],remain),this._process(inGlobStar,index,!0)}};GlobSync.prototype._processSimple=\nfunction(prefix,index){var exists=this._stat(prefix);this.matches[index]||(this.matches[index]=Object.create(null));exists&&(prefix&&isAbsolute(prefix)&&!this.nomount&&(exists=/[\\/\\\\]$/.test(prefix),\"/\"===prefix.charAt(0)?prefix=path.join(this.root,prefix):(prefix=path.resolve(this.root,prefix),exists&&(prefix+=\"/\"))),\"win32\"===process.platform&&(prefix=prefix.replace(/\\\\/g,\"/\")),this._emitMatch(index,prefix))};GlobSync.prototype._stat=function(f){var abs=this._makeAbs(f),needDir=\"/\"===f.slice(-1);\nif(f.length>this.maxLength)return!1;if(!this.stat&&ownProp(this.cache,abs)){f=this.cache[abs];Array.isArray(f)&&(f=\"DIR\");if(!needDir||\"DIR\"===f)return f;if(needDir&&\"FILE\"===f)return!1}var stat=this.statCache[abs];if(!stat){try{var lstat=fs.lstatSync(abs)}catch(er){if(er&&(\"ENOENT\"===er.code||\"ENOTDIR\"===er.code))return this.statCache[abs]=!1}if(lstat&&lstat.isSymbolicLink())try{stat=fs.statSync(abs)}catch(er$3){stat=lstat}else stat=lstat}this.statCache[abs]=stat;f=!0;stat&&(f=stat.isDirectory()?\n\"DIR\":\"FILE\");this.cache[abs]=this.cache[abs]||f;return needDir&&\"FILE\"===f?!1:f};GlobSync.prototype._mark=function(p){return common.mark(this,p)};GlobSync.prototype._makeAbs=function(f){return common.makeAbs(this,f)}}","~:source","shadow$provide[\"module$node_modules$glob$sync\"] = function(global,require,module,exports) {\nvar process = require('process');\nmodule.exports = globSync\nglobSync.GlobSync = GlobSync\n\nvar fs = require('fs')\nvar rp = require('fs.realpath')\nvar minimatch = require('minimatch')\nvar Minimatch = minimatch.Minimatch\nvar Glob = require('./glob.js').Glob\nvar util = require('util')\nvar path = require('path')\nvar assert = require('assert')\nvar isAbsolute = require('path-is-absolute')\nvar common = require('./common.js')\nvar alphasort = common.alphasort\nvar alphasorti = common.alphasorti\nvar setopts = common.setopts\nvar ownProp = common.ownProp\nvar childrenIgnored = common.childrenIgnored\nvar isIgnored = common.isIgnored\n\nfunction globSync (pattern, options) {\n  if (typeof options === 'function' || arguments.length === 3)\n    throw new TypeError('callback provided to sync glob\\n'+\n                        'See: https://github.com/isaacs/node-glob/issues/167')\n\n  return new GlobSync(pattern, options).found\n}\n\nfunction GlobSync (pattern, options) {\n  if (!pattern)\n    throw new Error('must provide pattern')\n\n  if (typeof options === 'function' || arguments.length === 3)\n    throw new TypeError('callback provided to sync glob\\n'+\n                        'See: https://github.com/isaacs/node-glob/issues/167')\n\n  if (!(this instanceof GlobSync))\n    return new GlobSync(pattern, options)\n\n  setopts(this, pattern, options)\n\n  if (this.noprocess)\n    return this\n\n  var n = this.minimatch.set.length\n  this.matches = new Array(n)\n  for (var i = 0; i < n; i ++) {\n    this._process(this.minimatch.set[i], i, false)\n  }\n  this._finish()\n}\n\nGlobSync.prototype._finish = function () {\n  assert(this instanceof GlobSync)\n  if (this.realpath) {\n    var self = this\n    this.matches.forEach(function (matchset, index) {\n      var set = self.matches[index] = Object.create(null)\n      for (var p in matchset) {\n        try {\n          p = self._makeAbs(p)\n          var real = rp.realpathSync(p, self.realpathCache)\n          set[real] = true\n        } catch (er) {\n          if (er.syscall === 'stat')\n            set[self._makeAbs(p)] = true\n          else\n            throw er\n        }\n      }\n    })\n  }\n  common.finish(this)\n}\n\n\nGlobSync.prototype._process = function (pattern, index, inGlobStar) {\n  assert(this instanceof GlobSync)\n\n  // Get the first [n] parts of pattern that are all strings.\n  var n = 0\n  while (typeof pattern[n] === 'string') {\n    n ++\n  }\n  // now n is the index of the first one that is *not* a string.\n\n  // See if there's anything else\n  var prefix\n  switch (n) {\n    // if not, then this is rather simple\n    case pattern.length:\n      this._processSimple(pattern.join('/'), index)\n      return\n\n    case 0:\n      // pattern *starts* with some non-trivial item.\n      // going to readdir(cwd), but not include the prefix in matches.\n      prefix = null\n      break\n\n    default:\n      // pattern has some string bits in the front.\n      // whatever it starts with, whether that's 'absolute' like /foo/bar,\n      // or 'relative' like '../baz'\n      prefix = pattern.slice(0, n).join('/')\n      break\n  }\n\n  var remain = pattern.slice(n)\n\n  // get the list of entries.\n  var read\n  if (prefix === null)\n    read = '.'\n  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {\n    if (!prefix || !isAbsolute(prefix))\n      prefix = '/' + prefix\n    read = prefix\n  } else\n    read = prefix\n\n  var abs = this._makeAbs(read)\n\n  //if ignored, skip processing\n  if (childrenIgnored(this, read))\n    return\n\n  var isGlobStar = remain[0] === minimatch.GLOBSTAR\n  if (isGlobStar)\n    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar)\n  else\n    this._processReaddir(prefix, read, abs, remain, index, inGlobStar)\n}\n\n\nGlobSync.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {\n  var entries = this._readdir(abs, inGlobStar)\n\n  // if the abs isn't a dir, then nothing can match!\n  if (!entries)\n    return\n\n  // It will only match dot entries if it starts with a dot, or if\n  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\n  var pn = remain[0]\n  var negate = !!this.minimatch.negate\n  var rawGlob = pn._glob\n  var dotOk = this.dot || rawGlob.charAt(0) === '.'\n\n  var matchedEntries = []\n  for (var i = 0; i < entries.length; i++) {\n    var e = entries[i]\n    if (e.charAt(0) !== '.' || dotOk) {\n      var m\n      if (negate && !prefix) {\n        m = !e.match(pn)\n      } else {\n        m = e.match(pn)\n      }\n      if (m)\n        matchedEntries.push(e)\n    }\n  }\n\n  var len = matchedEntries.length\n  // If there are no matched entries, then nothing matches.\n  if (len === 0)\n    return\n\n  // if this is the last remaining pattern bit, then no need for\n  // an additional stat *unless* the user has specified mark or\n  // stat explicitly.  We know they exist, since readdir returned\n  // them.\n\n  if (remain.length === 1 && !this.mark && !this.stat) {\n    if (!this.matches[index])\n      this.matches[index] = Object.create(null)\n\n    for (var i = 0; i < len; i ++) {\n      var e = matchedEntries[i]\n      if (prefix) {\n        if (prefix.slice(-1) !== '/')\n          e = prefix + '/' + e\n        else\n          e = prefix + e\n      }\n\n      if (e.charAt(0) === '/' && !this.nomount) {\n        e = path.join(this.root, e)\n      }\n      this._emitMatch(index, e)\n    }\n    // This was the last one, and no stats were needed\n    return\n  }\n\n  // now test all matched entries as stand-ins for that part\n  // of the pattern.\n  remain.shift()\n  for (var i = 0; i < len; i ++) {\n    var e = matchedEntries[i]\n    var newPattern\n    if (prefix)\n      newPattern = [prefix, e]\n    else\n      newPattern = [e]\n    this._process(newPattern.concat(remain), index, inGlobStar)\n  }\n}\n\n\nGlobSync.prototype._emitMatch = function (index, e) {\n  if (isIgnored(this, e))\n    return\n\n  var abs = this._makeAbs(e)\n\n  if (this.mark)\n    e = this._mark(e)\n\n  if (this.absolute) {\n    e = abs\n  }\n\n  if (this.matches[index][e])\n    return\n\n  if (this.nodir) {\n    var c = this.cache[abs]\n    if (c === 'DIR' || Array.isArray(c))\n      return\n  }\n\n  this.matches[index][e] = true\n\n  if (this.stat)\n    this._stat(e)\n}\n\n\nGlobSync.prototype._readdirInGlobStar = function (abs) {\n  // follow all symlinked directories forever\n  // just proceed as if this is a non-globstar situation\n  if (this.follow)\n    return this._readdir(abs, false)\n\n  var entries\n  var lstat\n  var stat\n  try {\n    lstat = fs.lstatSync(abs)\n  } catch (er) {\n    if (er.code === 'ENOENT') {\n      // lstat failed, doesn't exist\n      return null\n    }\n  }\n\n  var isSym = lstat && lstat.isSymbolicLink()\n  this.symlinks[abs] = isSym\n\n  // If it's not a symlink or a dir, then it's definitely a regular file.\n  // don't bother doing a readdir in that case.\n  if (!isSym && lstat && !lstat.isDirectory())\n    this.cache[abs] = 'FILE'\n  else\n    entries = this._readdir(abs, false)\n\n  return entries\n}\n\nGlobSync.prototype._readdir = function (abs, inGlobStar) {\n  var entries\n\n  if (inGlobStar && !ownProp(this.symlinks, abs))\n    return this._readdirInGlobStar(abs)\n\n  if (ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n    if (!c || c === 'FILE')\n      return null\n\n    if (Array.isArray(c))\n      return c\n  }\n\n  try {\n    return this._readdirEntries(abs, fs.readdirSync(abs))\n  } catch (er) {\n    this._readdirError(abs, er)\n    return null\n  }\n}\n\nGlobSync.prototype._readdirEntries = function (abs, entries) {\n  // if we haven't asked to stat everything, then just\n  // assume that everything in there exists, so we can avoid\n  // having to stat it a second time.\n  if (!this.mark && !this.stat) {\n    for (var i = 0; i < entries.length; i ++) {\n      var e = entries[i]\n      if (abs === '/')\n        e = abs + e\n      else\n        e = abs + '/' + e\n      this.cache[e] = true\n    }\n  }\n\n  this.cache[abs] = entries\n\n  // mark and cache dir-ness\n  return entries\n}\n\nGlobSync.prototype._readdirError = function (f, er) {\n  // handle errors, and cache the information\n  switch (er.code) {\n    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205\n    case 'ENOTDIR': // totally normal. means it *does* exist.\n      var abs = this._makeAbs(f)\n      this.cache[abs] = 'FILE'\n      if (abs === this.cwdAbs) {\n        var error = new Error(er.code + ' invalid cwd ' + this.cwd)\n        error.path = this.cwd\n        error.code = er.code\n        throw error\n      }\n      break\n\n    case 'ENOENT': // not terribly unusual\n    case 'ELOOP':\n    case 'ENAMETOOLONG':\n    case 'UNKNOWN':\n      this.cache[this._makeAbs(f)] = false\n      break\n\n    default: // some unusual error.  Treat as failure.\n      this.cache[this._makeAbs(f)] = false\n      if (this.strict)\n        throw er\n      if (!this.silent)\n        console.error('glob error', er)\n      break\n  }\n}\n\nGlobSync.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {\n\n  var entries = this._readdir(abs, inGlobStar)\n\n  // no entries means not a dir, so it can never have matches\n  // foo.txt/** doesn't match foo.txt\n  if (!entries)\n    return\n\n  // test without the globstar, and with every child both below\n  // and replacing the globstar.\n  var remainWithoutGlobStar = remain.slice(1)\n  var gspref = prefix ? [ prefix ] : []\n  var noGlobStar = gspref.concat(remainWithoutGlobStar)\n\n  // the noGlobStar pattern exits the inGlobStar state\n  this._process(noGlobStar, index, false)\n\n  var len = entries.length\n  var isSym = this.symlinks[abs]\n\n  // If it's a symlink, and we're in a globstar, then stop\n  if (isSym && inGlobStar)\n    return\n\n  for (var i = 0; i < len; i++) {\n    var e = entries[i]\n    if (e.charAt(0) === '.' && !this.dot)\n      continue\n\n    // these two cases enter the inGlobStar state\n    var instead = gspref.concat(entries[i], remainWithoutGlobStar)\n    this._process(instead, index, true)\n\n    var below = gspref.concat(entries[i], remain)\n    this._process(below, index, true)\n  }\n}\n\nGlobSync.prototype._processSimple = function (prefix, index) {\n  // XXX review this.  Shouldn't it be doing the mounting etc\n  // before doing stat?  kinda weird?\n  var exists = this._stat(prefix)\n\n  if (!this.matches[index])\n    this.matches[index] = Object.create(null)\n\n  // If it doesn't exist, then just mark the lack of results\n  if (!exists)\n    return\n\n  if (prefix && isAbsolute(prefix) && !this.nomount) {\n    var trail = /[\\/\\\\]$/.test(prefix)\n    if (prefix.charAt(0) === '/') {\n      prefix = path.join(this.root, prefix)\n    } else {\n      prefix = path.resolve(this.root, prefix)\n      if (trail)\n        prefix += '/'\n    }\n  }\n\n  if (process.platform === 'win32')\n    prefix = prefix.replace(/\\\\/g, '/')\n\n  // Mark this as a match\n  this._emitMatch(index, prefix)\n}\n\n// Returns either 'DIR', 'FILE', or false\nGlobSync.prototype._stat = function (f) {\n  var abs = this._makeAbs(f)\n  var needDir = f.slice(-1) === '/'\n\n  if (f.length > this.maxLength)\n    return false\n\n  if (!this.stat && ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n\n    if (Array.isArray(c))\n      c = 'DIR'\n\n    // It exists, but maybe not how we need it\n    if (!needDir || c === 'DIR')\n      return c\n\n    if (needDir && c === 'FILE')\n      return false\n\n    // otherwise we have to stat, because maybe c=true\n    // if we know it exists, but not what it is.\n  }\n\n  var exists\n  var stat = this.statCache[abs]\n  if (!stat) {\n    var lstat\n    try {\n      lstat = fs.lstatSync(abs)\n    } catch (er) {\n      if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {\n        this.statCache[abs] = false\n        return false\n      }\n    }\n\n    if (lstat && lstat.isSymbolicLink()) {\n      try {\n        stat = fs.statSync(abs)\n      } catch (er) {\n        stat = lstat\n      }\n    } else {\n      stat = lstat\n    }\n  }\n\n  this.statCache[abs] = stat\n\n  var c = true\n  if (stat)\n    c = stat.isDirectory() ? 'DIR' : 'FILE'\n\n  this.cache[abs] = this.cache[abs] || c\n\n  if (needDir && c === 'FILE')\n    return false\n\n  return c\n}\n\nGlobSync.prototype._mark = function (p) {\n  return common.mark(this, p)\n}\n\nGlobSync.prototype._makeAbs = function (f) {\n  return common.makeAbs(this, f)\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$glob$common","~$module$node_modules$process$browser","~$shadow$empty","~$module$node_modules$fs_DOT_realpath$index","~$shadow.js","~$module$node_modules$assert$assert","~$module$node_modules$path_browserify$index","~$module$node_modules$util$util","~$module$node_modules$minimatch$minimatch","~$module$node_modules$glob$glob","~$module$node_modules$path_is_absolute$index"]],"~:properties",["^5",["_readdirInGlobStar","_makeAbs","_finish","_processGlobStar","path","_processSimple","_readdirEntries","_process","_stat","_emitMatch","matches","_readdirError","_processReaddir","_readdir","_mark","GlobSync","code"]],"~:compiled-at",1562407149196,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$glob$sync.js\",\n\"lineCount\":14,\n\"mappings\":\"AAAAA,cAAA,8BAAA,CAAkD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAsB1FC,QAASA,SAAS,CAACC,OAAD,CAAUC,OAAV,CAAmB,CACnC,GAAuB,UAAvB,GAAI,MAAOA,QAAX,EAA0D,CAA1D,GAAqCC,SAAAC,OAArC,CACE,KAAM,KAAIC,SAAJ,CAAc,qFAAd,CAAN,CAGF,MAAOC,CAAA,IAAIC,QAAJ,CAAaN,OAAb,CAAsBC,OAAtB,CAAAI,OAL4B,CAQrCC,QAASA,SAAS,CAACN,OAAD,CAAUC,OAAV,CAAmB,CACnC,GAAI,CAACD,OAAL,CACE,KAAUO,MAAJ,CAAU,sBAAV,CAAN,CAEF,GAAuB,UAAvB,GAAI,MAAON,QAAX,EAA0D,CAA1D,GAAqCC,SAAAC,OAArC,CACE,KAAM,KAAIC,SAAJ,CAAc,qFAAd,CAAN;AAGF,GAAI,EAAE,IAAF,WAAkBE,SAAlB,CAAJ,CACE,MAAO,KAAIA,QAAJ,CAAaN,OAAb,CAAsBC,OAAtB,CAETO,QAAA,CAAQ,IAAR,CAAcR,OAAd,CAAuBC,OAAvB,CAEA,IAAI,IAAAQ,UAAJ,CACE,MAAO,KAET,KAAIC,EAAI,IAAAC,UAAAC,IAAAT,OACR,KAAAU,QAAA,CAAmBC,KAAJ,CAAUJ,CAAV,CACf,KAAK,IAAIK,EAAI,CAAb,CAAgBA,CAAhB,CAAoBL,CAApB,CAAuBK,CAAA,EAAvB,CACE,IAAAC,SAAA,CAAc,IAAAL,UAAAC,IAAA,CAAmBG,CAAnB,CAAd,CAAqCA,CAArC,CAAwC,CAAA,CAAxC,CAEF,KAAAE,QAAA,EArBmC,CA7BrC,IAAIC,QAAUtB,OAAA,CAAQ,qCAAR,CACdC,OAAAC,QAAA,CAAiBC,QACjBA,SAAAO,SAAA,CAAoBA,QAEpB,KAAIa,GAAKvB,OAAA,CAAQ,cAAR,CAAT,CACIwB,GAAKxB,OAAA,CAAQ,2CAAR,CADT,CAEIe,UAAYf,OAAA,CAAQ,yCAAR,CAELA;OAAA,CAAQ,+BAAR,CACAA,QAAA,CAAQ,+BAAR,CACX,KAAIyB,KAAOzB,OAAA,CAAQ,2CAAR,CAAX,CACI0B,OAAS1B,OAAA,CAAQ,mCAAR,CADb,CAEI2B,WAAa3B,OAAA,CAAQ,4CAAR,CAFjB,CAGI4B,OAAS5B,OAAA,CAAQ,iCAAR,CAHb,CAMIY,QAAUgB,MAAAhB,QANd,CAOIiB,QAAUD,MAAAC,QAPd,CAQIC,gBAAkBF,MAAAE,gBARtB,CASIC,UAAYH,MAAAG,UAkChBrB,SAAAsB,UAAAX,QAAA,CAA6BY,QAAS,EAAG,CACvCP,MAAA,CAAO,IAAP,WAAuBhB,SAAvB,CACA,IAAI,IAAAwB,SAAJ,CAAmB,CACjB,IAAIC;AAAO,IACX,KAAAlB,QAAAmB,QAAA,CAAqB,QAAS,CAACC,QAAD,CAAWC,KAAX,CAAkB,CAC1CtB,KAAAA,CAAMmB,IAAAlB,QAAA,CAAaqB,KAAb,CAANtB,CAA4BuB,MAAAC,OAAA,CAAc,IAAd,CAChC,KAAKC,IAAIA,CAAT,GAAcJ,SAAd,CACE,GAAI,CACFI,CAAA,CAAIN,IAAAO,SAAA,CAAcD,CAAd,CACJ,KAAIE,KAAOnB,EAAAoB,aAAA,CAAgBH,CAAhB,CAAmBN,IAAAU,cAAnB,CACX7B,MAAA,CAAI2B,IAAJ,CAAA,CAAY,CAAA,CAHV,CAIF,MAAOG,EAAP,CAAW,CACX,GAAmB,MAAnB,GAAIA,EAAAC,QAAJ,CACE/B,KAAA,CAAImB,IAAAO,SAAA,CAAcD,CAAd,CAAJ,CAAA,CAAwB,CAAA,CAD1B,KAGE,MAAMK,GAAN,CAJS,CAP+B,CAAhD,CAFiB,CAkBnBlB,MAAAoB,OAAA,CAAc,IAAd,CApBuC,CAwBzCtC,SAAAsB,UAAAZ,SAAA,CAA8B6B,QAAS,CAAC7C,OAAD,CAAUkC,KAAV,CAAiBY,UAAjB,CAA6B,CAClExB,MAAA,CAAO,IAAP,WAAuBhB,SAAvB,CAIA,KADA,IAAII,EAAI,CACR,CAA6B,QAA7B,GAAO,MAAOV,QAAA,CAAQU,CAAR,CAAd,CAAA,CACEA,CAAA,EAMF,QAAQA,CAAR,EAEE,KAAKV,OAAAG,OAAL,CACE,IAAA4C,eAAA,CAAoB/C,OAAAgD,KAAA,CAAa,GAAb,CAApB;AAAuCd,KAAvC,CACA,OAEF,MAAK,CAAL,CAGE,IAAAe,OAAS,IACT,MAEF,SAIEA,MAAA,CAASjD,OAAAkD,MAAA,CAAc,CAAd,CAAiBxC,CAAjB,CAAAsC,KAAA,CAAyB,GAAzB,CAhBb,CAoBIG,CAAAA,CAASnD,OAAAkD,MAAA,CAAcxC,CAAd,CAIb,IAAe,IAAf,GAAIuC,MAAJ,CACEG,OAAA,CAAO,GADT,KAEK,CAAA,GAAI7B,UAAA,CAAW0B,MAAX,CAAJ,EAA0B1B,UAAA,CAAWvB,OAAAgD,KAAA,CAAa,GAAb,CAAX,CAA1B,CACEC,MAAL,EAAgB1B,UAAA,CAAW0B,MAAX,CAAhB,GACEA,MADF,CACW,GADX,CACiBA,MADjB,CAEAG,QAAA,CAAOH,MAHJ,CAOL,IAAII,IAAM,IAAAf,SAAA,CAAcc,OAAd,CAGN1B,gBAAA,CAAgB,IAAhB,CAAsB0B,OAAtB,CAAJ,GAGiBD,CAAA,CAAO,CAAP,CACjB,GAD+BxC,SAAA2C,SAC/B,CACE,IAAAC,iBAAA,CAAsBN,MAAtB,CAA8BG,OAA9B,CAAoCC,GAApC,CAAyCF,CAAzC,CAAiDjB,KAAjD,CAAwDY,UAAxD,CADF,CAGE,IAAAU,gBAAA,CAAqBP,MAArB,CAA6BG,OAA7B,CAAmCC,GAAnC,CAAwCF,CAAxC,CAAgDjB,KAAhD,CAAuDY,UAAvD,CAPF,CAhDkE,CA2DpExC,SAAAsB,UAAA4B,gBAAA;AAAqCC,QAAS,CAACR,MAAD,CAASG,IAAT,CAAeC,GAAf,CAAoBF,MAApB,CAA4BjB,KAA5B,CAAmCY,UAAnC,CAA+C,CAI3F,GAHIY,IAGJ,CAHc,IAAAC,SAAA,CAAcN,GAAd,CAAmBP,UAAnB,CAGd,CAAA,CAKIc,GAAAA,CAAKT,MAAA,CAAO,CAAP,CACT,KAAIU,OAAS,CAAC,CAAC,IAAAlD,UAAAkD,OAAf,CACIC,QAAUF,GAAAG,MADd,CAEIC,MAAQ,IAAAC,IAARD,EAA0C,GAA1CA,GAAoBF,OAAAI,OAAA,CAAe,CAAf,CAEpBC,QAAAA,CAAiB,EACrB,KAAK,IAAIpD,EAAI,CAAb,CAAgBA,CAAhB,CAAoB2C,IAAAvD,OAApB,CAAoCY,CAAA,EAApC,CAAyC,CACvC,IAAIqD,EAAIV,IAAA,CAAQ3C,CAAR,CACR,EAAoB,GAApB,GAAIqD,CAAAF,OAAA,CAAS,CAAT,CAAJ,EAA2BF,KAA3B,IAEMH,MAAJQ,EAAc,CAACpB,MAAfoB,CACM,CAACD,CAAAE,MAAA,CAAQV,GAAR,CADPS,CAGMD,CAAAE,MAAA,CAAQV,GAAR,CALR,GAQIO,OAAAI,KAAA,CAAoBH,CAApB,CAVmC,CAcrCI,IAAAA,CAAML,OAAAhE,OAEV,IAAY,CAAZ,GAAIqE,IAAJ,CAQA,GAAsB,CAAtB,GAAIrB,MAAAhD,OAAJ,EAA4B,IAAAsE,KAA5B,EAA0C,IAAAC,KAA1C,CAyBA,IADAvB,MAAAwB,MAAA,EACK,CAAI5D,CAAJ,CAAQ,CAAb,CAAgBA,CAAhB,CAAoByD,IAApB,CAAyBzD,CAAA,EAAzB,CACMqD,CAMJ,CANQD,OAAA,CAAepD,CAAf,CAMR,CAAA,IAAAC,SAAA,CAAc4D,CAJV3B,MAAJ4B,CACe,CAAC5B,MAAD,CAASmB,CAAT,CADfS,CAGe,CAACT,CAAD,CACDQ,QAAA,CAAkBzB,MAAlB,CAAd;AAAyCjB,KAAzC,CAAgDY,UAAhD,CAhCF,KAIE,KAHK,IAAAjC,QAAA,CAAaqB,KAAb,CAGA,GAFH,IAAArB,QAAA,CAAaqB,KAAb,CAEG,CAFmBC,MAAAC,OAAA,CAAc,IAAd,CAEnB,EAAIrB,CAAJ,CAAQ,CAAb,CAAgBA,CAAhB,CAAoByD,IAApB,CAAyBzD,CAAA,EAAzB,CACMqD,CAWJ,CAXQD,OAAA,CAAepD,CAAf,CAWR,CAVIkC,MAUJ,GARImB,CAQJ,CAT2B,GAAzB,GAAInB,MAAAC,MAAA,CAAc,EAAd,CAAJ,CACMD,MADN,CACe,GADf,CACqBmB,CADrB,CAGMnB,MAHN,CAGemB,CAMjB,EAHoB,GAGpB,GAHIA,CAAAF,OAAA,CAAS,CAAT,CAGJ,EAH4B,IAAAY,QAG5B,GAFEV,CAEF,CAFM/C,IAAA2B,KAAA,CAAU,IAAA+B,KAAV,CAAqBX,CAArB,CAEN,EAAA,IAAAY,WAAA,CAAgB9C,KAAhB,CAAuBkC,CAAvB,CAnDJ,CAJ2F,CA4E7F9D,SAAAsB,UAAAoD,WAAA,CAAgCC,QAAS,CAAC/C,KAAD,CAAQkC,CAAR,CAAW,CAClD,GAAI,CAAAzC,SAAA,CAAU,IAAV,CAAgByC,CAAhB,CAAJ,CAAA,CAGA,IAAIf,IAAM,IAAAf,SAAA,CAAc8B,CAAd,CAEN,KAAAK,KAAJ,GACEL,CADF,CACM,IAAAc,MAAA,CAAWd,CAAX,CADN,CAGI,KAAAe,SAAJ,GACEf,CADF,CACMf,GADN,CAIA,IAAI,CAAA,IAAAxC,QAAA,CAAaqB,KAAb,CAAA,CAAoBkC,CAApB,CAAJ,CAAA,CAGA,GAAI,IAAAgB,MAAJ,GACMC,GACA,CADI,IAAAC,MAAA,CAAWjC,GAAX,CACJ,CAAM,KAAN,GAAAgC,GAAA,EAAevE,KAAAyE,QAAA,CAAcF,GAAd,CAFrB,EAGI,MAGJ;IAAAxE,QAAA,CAAaqB,KAAb,CAAA,CAAoBkC,CAApB,CAAA,CAAyB,CAAA,CAErB,KAAAM,KAAJ,EACE,IAAAc,MAAA,CAAWpB,CAAX,CAZF,CAZA,CADkD,CA6BpD9D,SAAAsB,UAAA6D,mBAAA,CAAwCC,QAAS,CAACrC,GAAD,CAAM,CAGrD,GAAI,IAAAsC,OAAJ,CACE,MAAO,KAAAhC,SAAA,CAAcN,GAAd,CAAmB,CAAA,CAAnB,CAET,KAAIK,OAGJ,IAAI,CACF,IAAAkC,MAAQzE,EAAA0E,UAAA,CAAaxC,GAAb,CADN,CAEF,MAAOX,EAAP,CAAW,CACX,GAAgB,QAAhB,GAAIA,EAAAoD,KAAJ,CAEE,MAAO,KAHE,CAOb,IAAIC,MAAQH,KAARG,EAAiBH,KAAAI,eAAA,EAKrB,EAJA,IAAAC,SAAA,CAAc5C,GAAd,CAIA,CAJqB0C,KAIrB,GAAcH,CAAAA,KAAd,EAAwBA,KAAAM,YAAA,EAAxB,CAGExC,OAHF,CAGY,IAAAC,SAAA,CAAcN,GAAd,CAAmB,CAAA,CAAnB,CAHZ,CACE,IAAAiC,MAAA,CAAWjC,GAAX,CADF,CACoB,MAIpB,OAAOK,QA5B8C,CA+BvDpD,SAAAsB,UAAA+B,SAAA,CAA8BwC,QAAS,CAAC9C,GAAD,CAAMP,UAAN,CAAkB,CAGvD,GAAIA,UAAJ,EAAkB,CAACrB,OAAA,CAAQ,IAAAwE,SAAR,CAAuB5C,GAAvB,CAAnB,CACE,MAAO,KAAAoC,mBAAA,CAAwBpC,GAAxB,CAET;GAAI5B,OAAA,CAAQ,IAAA6D,MAAR,CAAoBjC,GAApB,CAAJ,CAA8B,CACxBgC,UAAAA,CAAI,IAAAC,MAAA,CAAWjC,GAAX,CACR,IAAI,CAACgC,UAAL,EAAgB,MAAhB,GAAUA,UAAV,CACE,MAAO,KAET,IAAIvE,KAAAyE,QAAA,CAAcF,UAAd,CAAJ,CACE,MAAOA,WANmB,CAS9B,GAAI,CACF,MAAO,KAAAe,gBAAA,CAAqB/C,GAArB,CAA0BlC,EAAAkF,YAAA,CAAehD,GAAf,CAA1B,CADL,CAEF,MAAOX,EAAP,CAAW,CAEX,MADA,KAAA4D,cAAA,CAAmBjD,GAAnB,CAAwBX,EAAxB,CACO,CAAA,IAFI,CAjB0C,CAuBzDpC,SAAAsB,UAAAwE,gBAAA,CAAqCG,QAAS,CAAClD,GAAD,CAAMK,OAAN,CAAe,CAI3D,GAAI,CAAC,IAAAe,KAAL,EAAkB,CAAC,IAAAC,KAAnB,CACE,IAAK,IAAI3D,EAAI,CAAb,CAAgBA,CAAhB,CAAoB2C,OAAAvD,OAApB,CAAoCY,CAAA,EAApC,CAA0C,CACxC,IAAIqD,EAAIV,OAAA,CAAQ3C,CAAR,CAENqD,EAAA,CADU,GAAZ,GAAIf,GAAJ,CACMA,GADN,CACYe,CADZ,CAGMf,GAHN,CAGY,GAHZ,CAGkBe,CAClB,KAAAkB,MAAA,CAAWlB,CAAX,CAAA,CAAgB,CAAA,CANwB,CAa5C,MAHA,KAAAkB,MAAA,CAAWjC,GAAX,CAGA,CAHkBK,OAfyC,CAqB7DpD,SAAAsB,UAAA0E,cAAA;AAAmCE,QAAS,CAACC,CAAD,CAAI/D,EAAJ,CAAQ,CAElD,OAAQA,EAAAoD,KAAR,EACE,KAAK,SAAL,CACA,KAAK,SAAL,CACMzC,CAAAA,CAAM,IAAAf,SAAA,CAAcmE,CAAd,CACV,KAAAnB,MAAA,CAAWjC,CAAX,CAAA,CAAkB,MAClB,IAAIA,CAAJ,GAAY,IAAAqD,OAAZ,CAIE,KAHIC,EAGEA,CAHUpG,KAAJ,CAAUmC,EAAAoD,KAAV,CAAoB,eAApB,CAAsC,IAAAc,IAAtC,CAGND,CAFNA,CAAAtF,KAEMsF,CAFO,IAAAC,IAEPD,CADNA,CAAAb,KACMa,CADOjE,EAAAoD,KACPa,CAAAA,CAAN,CAEF,KAEF,MAAK,QAAL,CACA,KAAK,OAAL,CACA,KAAK,cAAL,CACA,KAAK,SAAL,CACE,IAAArB,MAAA,CAAW,IAAAhD,SAAA,CAAcmE,CAAd,CAAX,CAAA,CAA+B,CAAA,CAC/B,MAEF,SACE,IAAAnB,MAAA,CAAW,IAAAhD,SAAA,CAAcmE,CAAd,CAAX,CAAA,CAA+B,CAAA,CAC/B,IAAI,IAAAI,OAAJ,CACE,KAAMnE,GAAN,CACG,IAAAoE,OAAL,EACEC,OAAAJ,MAAA,CAAc,YAAd,CAA4BjE,EAA5B,CAzBN,CAFkD,CAgCpDpC,SAAAsB,UAAA2B,iBAAA,CAAsCyD,QAAS,CAAC/D,MAAD,CAASG,IAAT,CAAeC,GAAf,CAAoBF,MAApB,CAA4BjB,KAA5B,CAAmCY,UAAnC,CAA+C,CAM5F,GAJIY,IAIJ;AAJc,IAAAC,SAAA,CAAcN,GAAd,CAAmBP,UAAnB,CAId,CAAA,CAKA,IAAImE,sBAAwB9D,MAAAD,MAAA,CAAa,CAAb,CACxBgE,OAAAA,CAASjE,MAAA,CAAS,CAAEA,MAAF,CAAT,CAAsB,EACnC,KAAIkE,WAAaD,MAAAtC,OAAA,CAAcqC,qBAAd,CAGjB,KAAAjG,SAAA,CAAcmG,UAAd,CAA0BjF,KAA1B,CAAiC,CAAA,CAAjC,CAEIsC,WAAAA,CAAMd,IAAAvD,OAIV,IAHY4F,CAAA,IAAAE,SAAAF,CAAc1C,GAAd0C,CAGZ,EAAajD,CAAAA,UAAb,CAGA,IAAS/B,GAAT,CAAa,CAAb,CAAgBA,GAAhB,CAAoByD,UAApB,CAAyBzD,GAAA,EAAzB,CAEE,GAAoB,GAApB,GADQ2C,IAAAU,CAAQrD,GAARqD,CACJF,OAAA,CAAS,CAAT,CAAJ,EAA4B,IAAAD,IAA5B,CAIImD,UAIJ,CAJcF,MAAAtC,OAAA,CAAclB,IAAA,CAAQ3C,GAAR,CAAd,CAA0BkG,qBAA1B,CAId,CAHA,IAAAjG,SAAA,CAAcoG,UAAd,CAAuBlF,KAAvB,CAA8B,CAAA,CAA9B,CAGA,CADImF,UACJ,CADYH,MAAAtC,OAAA,CAAclB,IAAA,CAAQ3C,GAAR,CAAd,CAA0BoC,MAA1B,CACZ,CAAA,IAAAnC,SAAA,CAAcqG,UAAd,CAAqBnF,KAArB,CAA4B,CAAA,CAA5B,CA7BF,CAN4F,CAuC9F5B,SAAAsB,UAAAmB,eAAA;AAAoCuE,QAAS,CAACrE,MAAD,CAASf,KAAT,CAAgB,CAG3D,IAAIqF,OAAS,IAAA/B,MAAA,CAAWvC,MAAX,CAER,KAAApC,QAAA,CAAaqB,KAAb,CAAL,GACE,IAAArB,QAAA,CAAaqB,KAAb,CADF,CACwBC,MAAAC,OAAA,CAAc,IAAd,CADxB,CAIKmF,OAAL,GAGItE,MAeJ,EAfc1B,UAAA,CAAW0B,MAAX,CAed,EAfoC,CAAC,IAAA6B,QAerC,GAdM0C,MACJ,CADY,SAAAC,KAAA,CAAexE,MAAf,CACZ,CAAyB,GAAzB,GAAIA,MAAAiB,OAAA,CAAc,CAAd,CAAJ,CACEjB,MADF,CACW5B,IAAA2B,KAAA,CAAU,IAAA+B,KAAV,CAAqB9B,MAArB,CADX,EAGEA,MACA,CADS5B,IAAAqG,QAAA,CAAa,IAAA3C,KAAb,CAAwB9B,MAAxB,CACT,CAAIuE,MAAJ,GACEvE,MADF,EACY,GADZ,CAJF,CAaF,EAJyB,OAIzB,GAJI/B,OAAAyG,SAIJ,GAHE1E,MAGF,CAHWA,MAAA2E,QAAA,CAAe,KAAf,CAAsB,GAAtB,CAGX,EAAA,IAAA5C,WAAA,CAAgB9C,KAAhB,CAAuBe,MAAvB,CAlBA,CAT2D,CA+B7D3C,SAAAsB,UAAA4D,MAAA,CAA2BqC,QAAS,CAACpB,CAAD,CAAI,CACtC,IAAIpD,IAAM,IAAAf,SAAA,CAAcmE,CAAd,CAAV,CACIqB,QAA0B,GAA1BA,GAAUrB,CAAAvD,MAAA,CAAS,EAAT,CAEd;GAAIuD,CAAAtG,OAAJ,CAAe,IAAA4H,UAAf,CACE,MAAO,CAAA,CAET,IAAI,CAAC,IAAArD,KAAL,EAAkBjD,OAAA,CAAQ,IAAA6D,MAAR,CAAoBjC,GAApB,CAAlB,CAA4C,CACtCgC,CAAAA,CAAI,IAAAC,MAAA,CAAWjC,GAAX,CAEJvC,MAAAyE,QAAA,CAAcF,CAAd,CAAJ,GACEA,CADF,CACM,KADN,CAIA,IAAI,CAACyC,OAAL,EAAsB,KAAtB,GAAgBzC,CAAhB,CACE,MAAOA,EAET,IAAIyC,OAAJ,EAAqB,MAArB,GAAezC,CAAf,CACE,MAAO,CAAA,CAXiC,CAkB5C,IAAIX,KAAO,IAAAsD,UAAA,CAAe3E,GAAf,CACX,IAAI,CAACqB,IAAL,CAAW,CAET,GAAI,CACF,IAAAkB,MAAQzE,EAAA0E,UAAA,CAAaxC,GAAb,CADN,CAEF,MAAOX,EAAP,CAAW,CACX,GAAIA,EAAJ,GAAuB,QAAvB,GAAWA,EAAAoD,KAAX,EAA+C,SAA/C,GAAmCpD,EAAAoD,KAAnC,EAEE,MADA,KAAAkC,UAAA,CAAe3E,GAAf,CACA,CADsB,CAAA,CAFb,CAOb,GAAIuC,KAAJ,EAAaA,KAAAI,eAAA,EAAb,CACE,GAAI,CACFtB,IAAA,CAAOvD,EAAA8G,SAAA,CAAY5E,GAAZ,CADL,CAEF,MAAOX,IAAP,CAAW,CACXgC,IAAA,CAAOkB,KADI,CAHf,IAOElB,KAAA,CAAOkB,KAlBA,CAsBX,IAAAoC,UAAA,CAAe3E,GAAf,CAAA,CAAsBqB,IAElBW,EAAJ,CAAQ,CAAA,CACJX,KAAJ,GACEW,CADF,CACMX,IAAAwB,YAAA,EAAA;AAAqB,KAArB,CAA6B,MADnC,CAGA,KAAAZ,MAAA,CAAWjC,GAAX,CAAA,CAAkB,IAAAiC,MAAA,CAAWjC,GAAX,CAAlB,EAAqCgC,CAErC,OAAIyC,QAAJ,EAAqB,MAArB,GAAezC,CAAf,CACS,CAAA,CADT,CAGOA,CA3D+B,CA8DxC/E,SAAAsB,UAAAsD,MAAA,CAA2BgD,QAAS,CAAC7F,CAAD,CAAI,CACtC,MAAOb,OAAAiD,KAAA,CAAY,IAAZ,CAAkBpC,CAAlB,CAD+B,CAIxC/B,SAAAsB,UAAAU,SAAA,CAA8B6F,QAAS,CAAC1B,CAAD,CAAI,CACzC,MAAOjF,OAAA4G,QAAA,CAAe,IAAf,CAAqB3B,CAArB,CADkC,CAre+C;\",\n\"sources\":[\"node_modules/glob/sync.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$glob$sync\\\"] = function(global,require,module,exports) {\\nvar process = require('process');\\nmodule.exports = globSync\\nglobSync.GlobSync = GlobSync\\n\\nvar fs = require('fs')\\nvar rp = require('fs.realpath')\\nvar minimatch = require('minimatch')\\nvar Minimatch = minimatch.Minimatch\\nvar Glob = require('./glob.js').Glob\\nvar util = require('util')\\nvar path = require('path')\\nvar assert = require('assert')\\nvar isAbsolute = require('path-is-absolute')\\nvar common = require('./common.js')\\nvar alphasort = common.alphasort\\nvar alphasorti = common.alphasorti\\nvar setopts = common.setopts\\nvar ownProp = common.ownProp\\nvar childrenIgnored = common.childrenIgnored\\nvar isIgnored = common.isIgnored\\n\\nfunction globSync (pattern, options) {\\n  if (typeof options === 'function' || arguments.length === 3)\\n    throw new TypeError('callback provided to sync glob\\\\n'+\\n                        'See: https://github.com/isaacs/node-glob/issues/167')\\n\\n  return new GlobSync(pattern, options).found\\n}\\n\\nfunction GlobSync (pattern, options) {\\n  if (!pattern)\\n    throw new Error('must provide pattern')\\n\\n  if (typeof options === 'function' || arguments.length === 3)\\n    throw new TypeError('callback provided to sync glob\\\\n'+\\n                        'See: https://github.com/isaacs/node-glob/issues/167')\\n\\n  if (!(this instanceof GlobSync))\\n    return new GlobSync(pattern, options)\\n\\n  setopts(this, pattern, options)\\n\\n  if (this.noprocess)\\n    return this\\n\\n  var n = this.minimatch.set.length\\n  this.matches = new Array(n)\\n  for (var i = 0; i < n; i ++) {\\n    this._process(this.minimatch.set[i], i, false)\\n  }\\n  this._finish()\\n}\\n\\nGlobSync.prototype._finish = function () {\\n  assert(this instanceof GlobSync)\\n  if (this.realpath) {\\n    var self = this\\n    this.matches.forEach(function (matchset, index) {\\n      var set = self.matches[index] = Object.create(null)\\n      for (var p in matchset) {\\n        try {\\n          p = self._makeAbs(p)\\n          var real = rp.realpathSync(p, self.realpathCache)\\n          set[real] = true\\n        } catch (er) {\\n          if (er.syscall === 'stat')\\n            set[self._makeAbs(p)] = true\\n          else\\n            throw er\\n        }\\n      }\\n    })\\n  }\\n  common.finish(this)\\n}\\n\\n\\nGlobSync.prototype._process = function (pattern, index, inGlobStar) {\\n  assert(this instanceof GlobSync)\\n\\n  // Get the first [n] parts of pattern that are all strings.\\n  var n = 0\\n  while (typeof pattern[n] === 'string') {\\n    n ++\\n  }\\n  // now n is the index of the first one that is *not* a string.\\n\\n  // See if there's anything else\\n  var prefix\\n  switch (n) {\\n    // if not, then this is rather simple\\n    case pattern.length:\\n      this._processSimple(pattern.join('/'), index)\\n      return\\n\\n    case 0:\\n      // pattern *starts* with some non-trivial item.\\n      // going to readdir(cwd), but not include the prefix in matches.\\n      prefix = null\\n      break\\n\\n    default:\\n      // pattern has some string bits in the front.\\n      // whatever it starts with, whether that's 'absolute' like /foo/bar,\\n      // or 'relative' like '../baz'\\n      prefix = pattern.slice(0, n).join('/')\\n      break\\n  }\\n\\n  var remain = pattern.slice(n)\\n\\n  // get the list of entries.\\n  var read\\n  if (prefix === null)\\n    read = '.'\\n  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {\\n    if (!prefix || !isAbsolute(prefix))\\n      prefix = '/' + prefix\\n    read = prefix\\n  } else\\n    read = prefix\\n\\n  var abs = this._makeAbs(read)\\n\\n  //if ignored, skip processing\\n  if (childrenIgnored(this, read))\\n    return\\n\\n  var isGlobStar = remain[0] === minimatch.GLOBSTAR\\n  if (isGlobStar)\\n    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar)\\n  else\\n    this._processReaddir(prefix, read, abs, remain, index, inGlobStar)\\n}\\n\\n\\nGlobSync.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {\\n  var entries = this._readdir(abs, inGlobStar)\\n\\n  // if the abs isn't a dir, then nothing can match!\\n  if (!entries)\\n    return\\n\\n  // It will only match dot entries if it starts with a dot, or if\\n  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\\n  var pn = remain[0]\\n  var negate = !!this.minimatch.negate\\n  var rawGlob = pn._glob\\n  var dotOk = this.dot || rawGlob.charAt(0) === '.'\\n\\n  var matchedEntries = []\\n  for (var i = 0; i < entries.length; i++) {\\n    var e = entries[i]\\n    if (e.charAt(0) !== '.' || dotOk) {\\n      var m\\n      if (negate && !prefix) {\\n        m = !e.match(pn)\\n      } else {\\n        m = e.match(pn)\\n      }\\n      if (m)\\n        matchedEntries.push(e)\\n    }\\n  }\\n\\n  var len = matchedEntries.length\\n  // If there are no matched entries, then nothing matches.\\n  if (len === 0)\\n    return\\n\\n  // if this is the last remaining pattern bit, then no need for\\n  // an additional stat *unless* the user has specified mark or\\n  // stat explicitly.  We know they exist, since readdir returned\\n  // them.\\n\\n  if (remain.length === 1 && !this.mark && !this.stat) {\\n    if (!this.matches[index])\\n      this.matches[index] = Object.create(null)\\n\\n    for (var i = 0; i < len; i ++) {\\n      var e = matchedEntries[i]\\n      if (prefix) {\\n        if (prefix.slice(-1) !== '/')\\n          e = prefix + '/' + e\\n        else\\n          e = prefix + e\\n      }\\n\\n      if (e.charAt(0) === '/' && !this.nomount) {\\n        e = path.join(this.root, e)\\n      }\\n      this._emitMatch(index, e)\\n    }\\n    // This was the last one, and no stats were needed\\n    return\\n  }\\n\\n  // now test all matched entries as stand-ins for that part\\n  // of the pattern.\\n  remain.shift()\\n  for (var i = 0; i < len; i ++) {\\n    var e = matchedEntries[i]\\n    var newPattern\\n    if (prefix)\\n      newPattern = [prefix, e]\\n    else\\n      newPattern = [e]\\n    this._process(newPattern.concat(remain), index, inGlobStar)\\n  }\\n}\\n\\n\\nGlobSync.prototype._emitMatch = function (index, e) {\\n  if (isIgnored(this, e))\\n    return\\n\\n  var abs = this._makeAbs(e)\\n\\n  if (this.mark)\\n    e = this._mark(e)\\n\\n  if (this.absolute) {\\n    e = abs\\n  }\\n\\n  if (this.matches[index][e])\\n    return\\n\\n  if (this.nodir) {\\n    var c = this.cache[abs]\\n    if (c === 'DIR' || Array.isArray(c))\\n      return\\n  }\\n\\n  this.matches[index][e] = true\\n\\n  if (this.stat)\\n    this._stat(e)\\n}\\n\\n\\nGlobSync.prototype._readdirInGlobStar = function (abs) {\\n  // follow all symlinked directories forever\\n  // just proceed as if this is a non-globstar situation\\n  if (this.follow)\\n    return this._readdir(abs, false)\\n\\n  var entries\\n  var lstat\\n  var stat\\n  try {\\n    lstat = fs.lstatSync(abs)\\n  } catch (er) {\\n    if (er.code === 'ENOENT') {\\n      // lstat failed, doesn't exist\\n      return null\\n    }\\n  }\\n\\n  var isSym = lstat && lstat.isSymbolicLink()\\n  this.symlinks[abs] = isSym\\n\\n  // If it's not a symlink or a dir, then it's definitely a regular file.\\n  // don't bother doing a readdir in that case.\\n  if (!isSym && lstat && !lstat.isDirectory())\\n    this.cache[abs] = 'FILE'\\n  else\\n    entries = this._readdir(abs, false)\\n\\n  return entries\\n}\\n\\nGlobSync.prototype._readdir = function (abs, inGlobStar) {\\n  var entries\\n\\n  if (inGlobStar && !ownProp(this.symlinks, abs))\\n    return this._readdirInGlobStar(abs)\\n\\n  if (ownProp(this.cache, abs)) {\\n    var c = this.cache[abs]\\n    if (!c || c === 'FILE')\\n      return null\\n\\n    if (Array.isArray(c))\\n      return c\\n  }\\n\\n  try {\\n    return this._readdirEntries(abs, fs.readdirSync(abs))\\n  } catch (er) {\\n    this._readdirError(abs, er)\\n    return null\\n  }\\n}\\n\\nGlobSync.prototype._readdirEntries = function (abs, entries) {\\n  // if we haven't asked to stat everything, then just\\n  // assume that everything in there exists, so we can avoid\\n  // having to stat it a second time.\\n  if (!this.mark && !this.stat) {\\n    for (var i = 0; i < entries.length; i ++) {\\n      var e = entries[i]\\n      if (abs === '/')\\n        e = abs + e\\n      else\\n        e = abs + '/' + e\\n      this.cache[e] = true\\n    }\\n  }\\n\\n  this.cache[abs] = entries\\n\\n  // mark and cache dir-ness\\n  return entries\\n}\\n\\nGlobSync.prototype._readdirError = function (f, er) {\\n  // handle errors, and cache the information\\n  switch (er.code) {\\n    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205\\n    case 'ENOTDIR': // totally normal. means it *does* exist.\\n      var abs = this._makeAbs(f)\\n      this.cache[abs] = 'FILE'\\n      if (abs === this.cwdAbs) {\\n        var error = new Error(er.code + ' invalid cwd ' + this.cwd)\\n        error.path = this.cwd\\n        error.code = er.code\\n        throw error\\n      }\\n      break\\n\\n    case 'ENOENT': // not terribly unusual\\n    case 'ELOOP':\\n    case 'ENAMETOOLONG':\\n    case 'UNKNOWN':\\n      this.cache[this._makeAbs(f)] = false\\n      break\\n\\n    default: // some unusual error.  Treat as failure.\\n      this.cache[this._makeAbs(f)] = false\\n      if (this.strict)\\n        throw er\\n      if (!this.silent)\\n        console.error('glob error', er)\\n      break\\n  }\\n}\\n\\nGlobSync.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {\\n\\n  var entries = this._readdir(abs, inGlobStar)\\n\\n  // no entries means not a dir, so it can never have matches\\n  // foo.txt/** doesn't match foo.txt\\n  if (!entries)\\n    return\\n\\n  // test without the globstar, and with every child both below\\n  // and replacing the globstar.\\n  var remainWithoutGlobStar = remain.slice(1)\\n  var gspref = prefix ? [ prefix ] : []\\n  var noGlobStar = gspref.concat(remainWithoutGlobStar)\\n\\n  // the noGlobStar pattern exits the inGlobStar state\\n  this._process(noGlobStar, index, false)\\n\\n  var len = entries.length\\n  var isSym = this.symlinks[abs]\\n\\n  // If it's a symlink, and we're in a globstar, then stop\\n  if (isSym && inGlobStar)\\n    return\\n\\n  for (var i = 0; i < len; i++) {\\n    var e = entries[i]\\n    if (e.charAt(0) === '.' && !this.dot)\\n      continue\\n\\n    // these two cases enter the inGlobStar state\\n    var instead = gspref.concat(entries[i], remainWithoutGlobStar)\\n    this._process(instead, index, true)\\n\\n    var below = gspref.concat(entries[i], remain)\\n    this._process(below, index, true)\\n  }\\n}\\n\\nGlobSync.prototype._processSimple = function (prefix, index) {\\n  // XXX review this.  Shouldn't it be doing the mounting etc\\n  // before doing stat?  kinda weird?\\n  var exists = this._stat(prefix)\\n\\n  if (!this.matches[index])\\n    this.matches[index] = Object.create(null)\\n\\n  // If it doesn't exist, then just mark the lack of results\\n  if (!exists)\\n    return\\n\\n  if (prefix && isAbsolute(prefix) && !this.nomount) {\\n    var trail = /[\\\\/\\\\\\\\]$/.test(prefix)\\n    if (prefix.charAt(0) === '/') {\\n      prefix = path.join(this.root, prefix)\\n    } else {\\n      prefix = path.resolve(this.root, prefix)\\n      if (trail)\\n        prefix += '/'\\n    }\\n  }\\n\\n  if (process.platform === 'win32')\\n    prefix = prefix.replace(/\\\\\\\\/g, '/')\\n\\n  // Mark this as a match\\n  this._emitMatch(index, prefix)\\n}\\n\\n// Returns either 'DIR', 'FILE', or false\\nGlobSync.prototype._stat = function (f) {\\n  var abs = this._makeAbs(f)\\n  var needDir = f.slice(-1) === '/'\\n\\n  if (f.length > this.maxLength)\\n    return false\\n\\n  if (!this.stat && ownProp(this.cache, abs)) {\\n    var c = this.cache[abs]\\n\\n    if (Array.isArray(c))\\n      c = 'DIR'\\n\\n    // It exists, but maybe not how we need it\\n    if (!needDir || c === 'DIR')\\n      return c\\n\\n    if (needDir && c === 'FILE')\\n      return false\\n\\n    // otherwise we have to stat, because maybe c=true\\n    // if we know it exists, but not what it is.\\n  }\\n\\n  var exists\\n  var stat = this.statCache[abs]\\n  if (!stat) {\\n    var lstat\\n    try {\\n      lstat = fs.lstatSync(abs)\\n    } catch (er) {\\n      if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {\\n        this.statCache[abs] = false\\n        return false\\n      }\\n    }\\n\\n    if (lstat && lstat.isSymbolicLink()) {\\n      try {\\n        stat = fs.statSync(abs)\\n      } catch (er) {\\n        stat = lstat\\n      }\\n    } else {\\n      stat = lstat\\n    }\\n  }\\n\\n  this.statCache[abs] = stat\\n\\n  var c = true\\n  if (stat)\\n    c = stat.isDirectory() ? 'DIR' : 'FILE'\\n\\n  this.cache[abs] = this.cache[abs] || c\\n\\n  if (needDir && c === 'FILE')\\n    return false\\n\\n  return c\\n}\\n\\nGlobSync.prototype._mark = function (p) {\\n  return common.mark(this, p)\\n}\\n\\nGlobSync.prototype._makeAbs = function (f) {\\n  return common.makeAbs(this, f)\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"globSync\",\"pattern\",\"options\",\"arguments\",\"length\",\"TypeError\",\"found\",\"GlobSync\",\"Error\",\"setopts\",\"noprocess\",\"n\",\"minimatch\",\"set\",\"matches\",\"Array\",\"i\",\"_process\",\"_finish\",\"process\",\"fs\",\"rp\",\"path\",\"assert\",\"isAbsolute\",\"common\",\"ownProp\",\"childrenIgnored\",\"isIgnored\",\"prototype\",\"GlobSync.prototype._finish\",\"realpath\",\"self\",\"forEach\",\"matchset\",\"index\",\"Object\",\"create\",\"p\",\"_makeAbs\",\"real\",\"realpathSync\",\"realpathCache\",\"er\",\"syscall\",\"finish\",\"GlobSync.prototype._process\",\"inGlobStar\",\"_processSimple\",\"join\",\"prefix\",\"slice\",\"remain\",\"read\",\"abs\",\"GLOBSTAR\",\"_processGlobStar\",\"_processReaddir\",\"GlobSync.prototype._processReaddir\",\"entries\",\"_readdir\",\"pn\",\"negate\",\"rawGlob\",\"_glob\",\"dotOk\",\"dot\",\"charAt\",\"matchedEntries\",\"e\",\"m\",\"match\",\"push\",\"len\",\"mark\",\"stat\",\"shift\",\"concat\",\"newPattern\",\"nomount\",\"root\",\"_emitMatch\",\"GlobSync.prototype._emitMatch\",\"_mark\",\"absolute\",\"nodir\",\"c\",\"cache\",\"isArray\",\"_stat\",\"_readdirInGlobStar\",\"GlobSync.prototype._readdirInGlobStar\",\"follow\",\"lstat\",\"lstatSync\",\"code\",\"isSym\",\"isSymbolicLink\",\"symlinks\",\"isDirectory\",\"GlobSync.prototype._readdir\",\"_readdirEntries\",\"readdirSync\",\"_readdirError\",\"GlobSync.prototype._readdirEntries\",\"GlobSync.prototype._readdirError\",\"f\",\"cwdAbs\",\"error\",\"cwd\",\"strict\",\"silent\",\"console\",\"GlobSync.prototype._processGlobStar\",\"remainWithoutGlobStar\",\"gspref\",\"noGlobStar\",\"instead\",\"below\",\"GlobSync.prototype._processSimple\",\"exists\",\"trail\",\"test\",\"resolve\",\"platform\",\"replace\",\"GlobSync.prototype._stat\",\"needDir\",\"maxLength\",\"statCache\",\"statSync\",\"GlobSync.prototype._mark\",\"GlobSync.prototype._makeAbs\",\"makeAbs\"]\n}\n"]