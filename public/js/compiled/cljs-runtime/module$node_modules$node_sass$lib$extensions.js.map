{
"version":3,
"file":"module$node_modules$node_sass$lib$extensions.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/node-sass/lib/extensions.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_sass$lib$extensions\"] = function(global,require,module,exports) {\nvar process = require('process');\n/*!\n * node-sass: lib/extensions.js\n */\n\nvar eol = require('os').EOL,\n  fs = require('fs'),\n  pkg = require('../package.json'),\n  mkdir = require('mkdirp'),\n  path = require('path'),\n  defaultBinaryDir = path.join(__dirname, '..', 'vendor'),\n  trueCasePathSync = require('true-case-path');\n\n/**\n * Get the human readable name of the Platform that is running\n *\n * @param  {string} platform - An OS platform to match, or null to fallback to\n * the current process platform\n * @return {Object} The name of the platform if matched, false otherwise\n *\n * @api public\n */\nfunction getHumanPlatform(platform) {\n  switch (platform || process.platform) {\n    case 'darwin': return 'OS X';\n    case 'freebsd': return 'FreeBSD';\n    case 'linux': return 'Linux';\n    case 'linux_musl': return 'Linux/musl';\n    case 'win32': return 'Windows';\n    default: return false;\n  }\n}\n\n/**\n * Provides a more readable version of the architecture\n *\n * @param  {string} arch - An instruction architecture name to match, or null to\n * lookup the current process architecture\n * @return {Object} The value of the process architecture, or false if unknown\n *\n * @api public\n */\nfunction getHumanArchitecture(arch) {\n  switch (arch || process.arch) {\n    case 'ia32': return '32-bit';\n    case 'x86': return '32-bit';\n    case 'x64': return '64-bit';\n    default: return false;\n  }\n}\n\n/**\n * Get the friendly name of the Node environment being run\n *\n * @param  {Object} abi - A Node Application Binary Interface value, or null to\n * fallback to the current Node ABI\n * @return {Object} Returns a string name of the Node environment or false if\n * unmatched\n *\n * @api public\n */\nfunction getHumanNodeVersion(abi) {\n  switch (parseInt(abi || process.versions.modules, 10)) {\n    case 11: return 'Node 0.10.x';\n    case 14: return 'Node 0.12.x';\n    case 42: return 'io.js 1.x';\n    case 43: return 'io.js 1.1.x';\n    case 44: return 'io.js 2.x';\n    case 45: return 'io.js 3.x';\n    case 46: return 'Node.js 4.x';\n    case 47: return 'Node.js 5.x';\n    case 48: return 'Node.js 6.x';\n    case 49: return 'Electron 1.3.x';\n    case 50: return 'Electron 1.4.x';\n    case 51: return 'Node.js 7.x';\n    case 53: return 'Electron 1.6.x';\n    case 57: return 'Node.js 8.x';\n    case 59: return 'Node.js 9.x';\n    case 64: return 'Node.js 10.x';\n    case 67: return 'Node.js 11.x';\n    case 72: return 'Node.js 12.x';\n    default: return false;\n  }\n}\n\n/**\n * Get a human readable description of where node-sass is running to support\n * user error reporting when something goes wrong\n *\n * @param  {string} env - The name of the native bindings that is to be parsed\n * @return {string} A description of what os, architecture, and Node version\n * that is being run\n *\n * @api public\n */\nfunction getHumanEnvironment(env) {\n  var binding = env.replace(/_binding\\.node$/, ''),\n    parts = binding.split('-'),\n    platform = getHumanPlatform(parts[0]),\n    arch = getHumanArchitecture(parts[1]),\n    runtime = getHumanNodeVersion(parts[2]);\n\n  if (parts.length !== 3) {\n    return 'Unknown environment (' + binding + ')';\n  }\n\n  if (!platform) {\n    platform = 'Unsupported platform (' + parts[0] + ')';\n  }\n\n  if (!arch) {\n    arch = 'Unsupported architecture (' + parts[1] + ')';\n  }\n\n  if (!runtime) {\n    runtime = 'Unsupported runtime (' + parts[2] + ')';\n  }\n\n  return [\n    platform, arch, 'with', runtime,\n  ].join(' ');\n}\n\n/**\n * Get the value of the binaries under the default path\n *\n * @return {Array} The currently installed node-sass bindings\n *\n * @api public\n */\nfunction getInstalledBinaries() {\n  return fs.readdirSync(getBinaryDir());\n}\n\n/**\n * Check that an environment matches the whitelisted values or the current\n * environment if no parameters are passed\n *\n * @param  {string} platform - The name of the OS platform(darwin, win32, etc...)\n * @param  {string} arch - The instruction set architecture of the Node environment\n * @param  {string} abi - The Node Application Binary Interface\n * @return {Boolean} True, if node-sass supports the current platform, false otherwise\n *\n * @api public\n */\nfunction isSupportedEnvironment(platform, arch, abi) {\n  return (\n    false !== getHumanPlatform(platform) &&\n    false !== getHumanArchitecture(arch) &&\n    false !== getHumanNodeVersion(abi)\n  );\n}\n\n/**\n * Get the value of a CLI argument\n *\n * @param {String} name\n * @param {Array} args\n * @api private\n */\n\nfunction getArgument(name, args) {\n  var flags = args || process.argv.slice(2),\n    index = flags.lastIndexOf(name);\n\n  if (index === -1 || index + 1 >= flags.length) {\n    return null;\n  }\n\n  return flags[index + 1];\n}\n\n/**\n * Get binary name.\n * If environment variable SASS_BINARY_NAME,\n * .npmrc variable sass_binary_name or\n * process argument --binary-name is provided,\n * return it as is, otherwise make default binary\n * name: {platform}-{arch}-{v8 version}.node\n *\n * @api public\n */\n\nfunction getBinaryName() {\n  var binaryName,\n    variant,\n    platform = process.platform;\n\n  if (getArgument('--sass-binary-name')) {\n    binaryName = getArgument('--sass-binary-name');\n  } else if (process.env.SASS_BINARY_NAME) {\n    binaryName = process.env.SASS_BINARY_NAME;\n  } else if (process.env.npm_config_sass_binary_name) {\n    binaryName = process.env.npm_config_sass_binary_name;\n  } else if (pkg.nodeSassConfig && pkg.nodeSassConfig.binaryName) {\n    binaryName = pkg.nodeSassConfig.binaryName;\n  } else {\n    variant = getPlatformVariant();\n    if (variant) {\n      platform += '_' + variant;\n    }\n\n    binaryName = [\n      platform, '-',\n      process.arch, '-',\n      process.versions.modules\n    ].join('');\n  }\n\n  return [binaryName, 'binding.node'].join('_');\n}\n\n/**\n * Determine the URL to fetch binary file from.\n * By default fetch from the node-sass distribution\n * site on GitHub.\n *\n * The default URL can be overriden using\n * the environment variable SASS_BINARY_SITE,\n * .npmrc variable sass_binary_site or\n * or a command line option --sass-binary-site:\n *\n *   node scripts/install.js --sass-binary-site http://example.com/\n *\n * The URL should to the mirror of the repository\n * laid out as follows:\n *\n * SASS_BINARY_SITE/\n *\n *  v3.0.0\n *  v3.0.0/freebsd-x64-14_binding.node\n *  ....\n *  v3.0.0\n *  v3.0.0/freebsd-ia32-11_binding.node\n *  v3.0.0/freebsd-x64-42_binding.node\n *  ... etc. for all supported versions and platforms\n *\n * @api public\n */\n\nfunction getBinaryUrl() {\n  var site = getArgument('--sass-binary-site') ||\n             process.env.SASS_BINARY_SITE  ||\n             process.env.npm_config_sass_binary_site ||\n             (pkg.nodeSassConfig && pkg.nodeSassConfig.binarySite) ||\n             'https://github.com/sass/node-sass/releases/download';\n\n  return [site, 'v' + pkg.version, getBinaryName()].join('/');\n}\n\n/**\n * Get binary dir.\n * If environment variable SASS_BINARY_DIR,\n * .npmrc variable sass_binary_dir or\n * process argument --sass-binary-dir is provided,\n * select it by appending binary name, otherwise\n * use default binary dir.\n * Once the primary selection is made, check if\n * callers wants to throw if file not exists before\n * returning.\n *\n * @api public\n */\n\nfunction getBinaryDir() {\n  var binaryDir;\n\n  if (getArgument('--sass-binary-dir')) {\n    binaryDir = getArgument('--sass-binary-dir');\n  } else if (process.env.SASS_BINARY_DIR) {\n    binaryDir = process.env.SASS_BINARY_DIR;\n  } else if (process.env.npm_config_sass_binary_dir) {\n    binaryDir = process.env.npm_config_sass_binary_dir;\n  } else if (pkg.nodeSassConfig && pkg.nodeSassConfig.binaryDir) {\n    binaryDir = pkg.nodeSassConfig.binaryDir;\n  } else {\n    binaryDir = defaultBinaryDir;\n  }\n\n  return binaryDir;\n}\n\n/**\n * Get binary path.\n * If environment variable SASS_BINARY_PATH,\n * .npmrc variable sass_binary_path or\n * process argument --sass-binary-path is provided,\n * select it by appending binary name, otherwise\n * make default binary path using binary name.\n * Once the primary selection is made, check if\n * callers wants to throw if file not exists before\n * returning.\n *\n * @api public\n */\n\nfunction getBinaryPath() {\n  var binaryPath;\n\n  if (getArgument('--sass-binary-path')) {\n    binaryPath = getArgument('--sass-binary-path');\n  } else if (process.env.SASS_BINARY_PATH) {\n    binaryPath = process.env.SASS_BINARY_PATH;\n  } else if (process.env.npm_config_sass_binary_path) {\n    binaryPath = process.env.npm_config_sass_binary_path;\n  } else if (pkg.nodeSassConfig && pkg.nodeSassConfig.binaryPath) {\n    binaryPath = pkg.nodeSassConfig.binaryPath;\n  } else {\n    binaryPath = path.join(getBinaryDir(), getBinaryName().replace(/_(?=binding\\.node)/, '/'));\n  }\n\n  if (process.versions.modules < 46) {\n    return binaryPath;\n  }\n\n  try {\n    return trueCasePathSync(binaryPath) || binaryPath;\n  } catch (e) {\n    return binaryPath;\n  }\n}\n\n/**\n * An array of paths suitable for use as a local disk cache of the binding.\n *\n * @return {[]String} an array of paths\n * @api public\n */\nfunction getCachePathCandidates() {\n  return [\n    process.env.npm_config_sass_binary_cache,\n    process.env.npm_config_cache,\n  ].filter(function(_) { return _; });\n}\n\n/**\n * The most suitable location for caching the binding on disk.\n *\n * Given the candidates directories provided by `getCachePathCandidates()` this\n * returns the first writable directory. By treating the candidate directories\n * as a prioritised list this method is deterministic, assuming no change to the\n * local environment.\n *\n * @return {String} directory to cache binding\n * @api public\n */\nfunction getBinaryCachePath() {\n  var i,\n    cachePath,\n    cachePathCandidates = getCachePathCandidates();\n\n  for (i = 0; i < cachePathCandidates.length; i++) {\n    cachePath = path.join(cachePathCandidates[i], pkg.name, pkg.version);\n\n    try {\n      mkdir.sync(cachePath);\n      return cachePath;\n    } catch (e) {\n      // Directory is not writable, try another\n    }\n  }\n\n  return '';\n}\n\n/**\n * The cached binding\n *\n * Check the candidates directories provided by `getCachePathCandidates()` for\n * the binding file, if it exists. By treating the candidate directories\n * as a prioritised list this method is deterministic, assuming no change to the\n * local environment.\n *\n * @return {String} path to cached binary\n * @api public\n */\nfunction getCachedBinary() {\n  var i,\n    cachePath,\n    cacheBinary,\n    cachePathCandidates = getCachePathCandidates(),\n    binaryName = getBinaryName();\n\n  for (i = 0; i < cachePathCandidates.length; i++) {\n    cachePath = path.join(cachePathCandidates[i], pkg.name, pkg.version);\n    cacheBinary = path.join(cachePath, binaryName);\n\n    if (fs.existsSync(cacheBinary)) {\n      return cacheBinary;\n    }\n  }\n\n  return '';\n}\n\n/**\n * Does the supplied binary path exist\n *\n * @param {String} binaryPath\n * @api public\n */\n\nfunction hasBinary(binaryPath) {\n  return fs.existsSync(binaryPath);\n}\n\n/**\n * Get Sass version information\n *\n * @api public\n */\n\nfunction getVersionInfo(binding) {\n  return [\n    ['node-sass', pkg.version, '(Wrapper)', '[JavaScript]'].join('\\t'),\n    ['libsass  ', binding.libsassVersion(), '(Sass Compiler)', '[C/C++]'].join('\\t'),\n  ].join(eol);\n}\n\n/**\n * Gets the platform variant, currently either an empty string or 'musl' for Linux/musl platforms.\n *\n * @api public\n */\n\nfunction getPlatformVariant() {\n  var contents = '';\n\n  if (process.platform !== 'linux') {\n    return '';\n  }\n\n  try {\n    contents = fs.readFileSync(process.execPath);\n\n    // Buffer.indexOf was added in v1.5.0 so cast to string for old node\n    // Delay contents.toStrings because it's expensive\n    if (!contents.indexOf) {\n      contents = contents.toString();\n    }\n\n    if (contents.indexOf('libc.musl-x86_64.so.1') !== -1) {\n      return 'musl';\n    }\n  } catch (err) { } // eslint-disable-line no-empty\n\n  return '';\n}\n\nmodule.exports.hasBinary = hasBinary;\nmodule.exports.getBinaryUrl = getBinaryUrl;\nmodule.exports.getBinaryName = getBinaryName;\nmodule.exports.getBinaryDir = getBinaryDir;\nmodule.exports.getBinaryPath = getBinaryPath;\nmodule.exports.getBinaryCachePath = getBinaryCachePath;\nmodule.exports.getCachedBinary = getCachedBinary;\nmodule.exports.getCachePathCandidates = getCachePathCandidates;\nmodule.exports.getVersionInfo = getVersionInfo;\nmodule.exports.getHumanEnvironment = getHumanEnvironment;\nmodule.exports.getInstalledBinaries = getInstalledBinaries;\nmodule.exports.isSupportedEnvironment = isSupportedEnvironment;\n\n};"],
"names":["shadow$provide","global","require","module","exports","getHumanPlatform","platform","process","getHumanArchitecture","arch","getHumanNodeVersion","abi","parseInt","versions","modules","getArgument","name","args","flags","argv","slice","index","lastIndexOf","length","getBinaryName","binaryName","env","SASS_BINARY_NAME","npm_config_sass_binary_name","pkg","nodeSassConfig","variant","getPlatformVariant","join","getBinaryDir","binaryDir","SASS_BINARY_DIR","npm_config_sass_binary_dir","defaultBinaryDir","getCachePathCandidates","npm_config_sass_binary_cache","npm_config_cache","filter","_","contents","fs","readFileSync","execPath","indexOf","toString","err","eol","EOL","mkdir","path","__dirname","trueCasePathSync","hasBinary","binaryPath","existsSync","getBinaryUrl","SASS_BINARY_SITE","npm_config_sass_binary_site","binarySite","version","getBinaryPath","SASS_BINARY_PATH","npm_config_sass_binary_path","replace","e","getBinaryCachePath","i","cachePathCandidates","cachePath","sync","getCachedBinary","cacheBinary","getVersionInfo","binding","libsassVersion","getHumanEnvironment","parts","split","runtime","getInstalledBinaries","readdirSync","isSupportedEnvironment"]
}
