{"version":3,"sources":["breaking_bad_quotes/core.cljs"],"mappings":";;;;AAKA,AAAA,AAAMA,AAAaC;AAAnB,AACE,AAAA,AAAA,AAAA,AAAA,AAAAC,AAACC;AAAD,AACa,AAAAD,AAACE,AAAOH;AADrB,AAEkB,AAAAI;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAaK;AAAb,AAAAD,AAAAJ,AAAA,AAAoBM;AAApB,AACE,AAACC,AAAeF,AAAOC;;;AAE7C,AAAKE,AAAY,AAAA,AAACC;AAElB,AAAA,AAAMC;AAAN,AACE;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAWF,AAAA,AAAMC;AAAN,AACE,AAAMhB,AAAK,AAAA,AAACc;AAAZ,AACE,AAACf,AAAYC;;AACb;;AAAA,AACE,AAAAiB,AAA6B,AAAA,AAAAC,AAACG,AAAOrB;AAArCiB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAX,AAAA,AAAAW,AAAA,AAAA,AAAA,AAAA,AAAAV,AAAAC,AAAAS,AAAAA;AAAA,AAAAR,AAAAQ,AAAA,AAAcE;AAAd,AAAAV,AAAAQ,AAAA,AAAoBG;AAApB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIeL,AACAO;;;;AASrB,AAAA,AAAME;AAAN,AACE,AAAA,AAAA;;AAEF,AAAA,AAAMC;AAAN,AACE,AAAAC,AAAA,AAAqBT;AAArBU,AAC0B,AAAA,AAAGE;AAD7B,AAAA,AAAAH,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AAEH,AAAA,AAAeE;AAAf,AAIE,AAACL;;;AACH,AAAA,AAAMM;AAAN,AAGE,AAAA,AAACjB","names":["breaking-bad-quotes.core/fetch-link!","data","p1__26788#","ajax.core.GET.cljs$core$IFn$_invoke$arity$variadic","cljs.core/reset!","p__26789","map__26790","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","status","status-text","js/console.log","breaking-bad-quotes.core/click-count","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","breaking-bad-quotes.core/navbar","breaking-bad-quotes.core/quote","map__26792","cljs.core/deref","quote","author","cljs.core/first","breaking-bad-quotes.core/add","breaking-bad-quotes.core/start","G__26794","G__26795","reagent.core/render-component","js/document","breaking-bad-quotes.core/init","breaking-bad-quotes.core/stop"],"sourcesContent":["(ns breaking-bad-quotes.core\n  (:require [reagent.core :as r :refer [atom]]\n            [ajax.core :refer [GET]]\n            ))\n\n(defn fetch-link! [data]\n  (GET \"https://breaking-bad-quotes.herokuapp.com/v1/quotes\"\n    {:handler #(reset! data %)\n     :error-handler (fn [{:keys [status status-text]}]\n                      (js/console.log status status-text))}))\n\n(def click-count (r/atom 0))\n\n(defn navbar []\n  (fn []\n    [:nav.navbar\n     [:li [:a \"Home\"]]\n     [:li [:a \"Services\"]]\n     [:li [:a \"FAQ\"]]\n     [:li [:a \"About\"]]\n     [:li [:a \"Contact\"]]\n    ]\n    ))\n\n\n(defn quote []\n  (let [data (atom nil)]\n    (fetch-link! data)\n    (fn []\n      (let [{:strs [quote author]} (first @data)]\n        [:div.root\n         [:h2.inner \"Breaking Bad Quotes\"]\n         [:div.card-body.text-center\n          [:p#quote @click-count]\n          [:p#author author]]\n        [:div.card-footer.center.xt-center\n          [:button#twitter.outline>a#tweet\n          {:href \"#\"\n            :target \"_blank\"}\n          [:i.fi-social-twitter \" Tweasdet\"]]\n          [:button#new-quote.outline\n            [:i.fi-shuffle \" New Quote\"]]]]))))\n\n(defn add []\n  (+ 1 1))\n\n(defn start []\n  (r/render-component [navbar]\n                            (. js/document (getElementById \"app\"))))\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))\n(defn stop []  \n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n\n\n\n"]}